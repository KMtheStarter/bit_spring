<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd">

	<bean class="aop.xml.Designer" id="designer" />
	<bean class="aop.xml.Programmer" id="programmer" />
	<bean class="aop.xml.MyAspect" id="myAspect" />
	
	<aop:config>
		<aop:aspect ref="myAspect">
			<aop:pointcut expression="execution(* work())" id="pointCut01"/>
			<aop:before method="gotoOffice" pointcut-ref="pointCut01" />
			<aop:after method="getoffOffice" pointcut-ref="pointCut01"/>
			<!-- pointcut -> Designer 클래스의 work() 메소드가 실행되기 전에 -->
			<!-- <aop:before method="gotoOffice" pointcut="execution(* work())"></aop:before> -->
			<!-- * aop.xml.*.work(), * work() 하면 programmer도 됨. -->
			<!-- <aop:after method="getoffOffice" pointcut="execution(void *.*.Designer.work())"></aop:after> -->
		</aop:aspect>
	</aop:config>
</beans>
